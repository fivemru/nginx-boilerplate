## proxy example
# upstream proxy-backend-api {
#   server 127.0.0.1:3000;
# }

## http
server {
	listen 80;
	listen [::]:80;
	server_name site.com www.site.com;

  include block_bot.conf;
	include gzip.conf;

	## ACME
	include letsencrypt.conf;

	location / {
		return 301 https://$host$request_uri;
	}
}

## SSL www redirect
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name www.site.com;
	
  include block_bot.conf;
	include ssl-params.conf;
	include gzip.conf;

	## ssl cert
	# ssl_certificate /var/www/certbot/conf/live/site.com/fullchain.pem;
	# ssl_certificate_key /var/www/certbot/conf/live/site.com/privkey.pem;

	return 301 https://site.com$request_uri;
}

## SSL
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name site.com;
	charset UTF-8;

  include block_bot.conf;
	include ssl-params.conf;
	include gzip.conf;

	## ACME
	include letsencrypt.conf;	

  ## ssl cert
	# ssl_certificate /var/www/certbot/conf/live/site.com/fullchain.pem;
	# ssl_certificate_key /var/www/certbot/conf/live/site.com/privkey.pem;

	## example proxy to backend
	# location ~ /api/ {
	# 	proxy_pass http://proxy-backend-api;
	# 	include proxy.conf;
	# }
	
	## static files
	location ~ \.(?:css|js|jpe?g|png|gif|svg|ico|webp|woff2?|ttf|pdf|json|html|txt|xml|tgz|zip|rar|gz|7z|sql|tar)$ {
		expires 2w;
		root /var/www/site.com/public;
		# try_files $uri $uri/ @fallback;
	}

  ## serve files from dir
	location / {
		root /var/www/site.com/public;
	}

	## fallback to backend
	# location @fallback {
	# 	proxy_pass http://proxy-backend-api;
	# 	include proxy.conf;
	# }
}